// Code generated by mockery v2.46.0. DO NOT EDIT.

package arpcmocks

import (
	context "context"

	arpc "github.com/a-novel-kit/arpc"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockConnPool is an autogenerated mock type for the ConnPool type
type MockConnPool struct {
	mock.Mock
}

type MockConnPool_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnPool) EXPECT() *MockConnPool_Expecter {
	return &MockConnPool_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockConnPool) Close() {
	_m.Called()
}

// MockConnPool_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConnPool_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConnPool_Expecter) Close() *MockConnPool_Close_Call {
	return &MockConnPool_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConnPool_Close_Call) Run(run func()) *MockConnPool_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnPool_Close_Call) Return() *MockConnPool_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConnPool_Close_Call) RunAndReturn(run func()) *MockConnPool_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: ctx, host, port, protocol
func (_m *MockConnPool) Open(ctx context.Context, host string, port int, protocol arpc.Protocol) (*grpc.ClientConn, error) {
	ret := _m.Called(ctx, host, port, protocol)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *grpc.ClientConn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, arpc.Protocol) (*grpc.ClientConn, error)); ok {
		return rf(ctx, host, port, protocol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, arpc.Protocol) *grpc.ClientConn); ok {
		r0 = rf(ctx, host, port, protocol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ClientConn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, arpc.Protocol) error); ok {
		r1 = rf(ctx, host, port, protocol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnPool_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockConnPool_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - port int
//   - protocol arpc.Protocol
func (_e *MockConnPool_Expecter) Open(ctx interface{}, host interface{}, port interface{}, protocol interface{}) *MockConnPool_Open_Call {
	return &MockConnPool_Open_Call{Call: _e.mock.On("Open", ctx, host, port, protocol)}
}

func (_c *MockConnPool_Open_Call) Run(run func(ctx context.Context, host string, port int, protocol arpc.Protocol)) *MockConnPool_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(arpc.Protocol))
	})
	return _c
}

func (_c *MockConnPool_Open_Call) Return(_a0 *grpc.ClientConn, _a1 error) *MockConnPool_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnPool_Open_Call) RunAndReturn(run func(context.Context, string, int, arpc.Protocol) (*grpc.ClientConn, error)) *MockConnPool_Open_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnPool creates a new instance of MockConnPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnPool {
	mock := &MockConnPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
