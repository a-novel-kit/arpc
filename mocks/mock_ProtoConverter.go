// Code generated by mockery v2.46.0. DO NOT EDIT.

package arpcmocks

import mock "github.com/stretchr/testify/mock"

// MockProtoConverter is an autogenerated mock type for the ProtoConverter type
type MockProtoConverter[Proto comparable, Entity comparable] struct {
	mock.Mock
}

type MockProtoConverter_Expecter[Proto comparable, Entity comparable] struct {
	mock *mock.Mock
}

func (_m *MockProtoConverter[Proto, Entity]) EXPECT() *MockProtoConverter_Expecter[Proto, Entity] {
	return &MockProtoConverter_Expecter[Proto, Entity]{mock: &_m.Mock}
}

// FromProto provides a mock function with given fields: src
func (_m *MockProtoConverter[Proto, Entity]) FromProto(src Proto) Entity {
	ret := _m.Called(src)

	if len(ret) == 0 {
		panic("no return value specified for FromProto")
	}

	var r0 Entity
	if rf, ok := ret.Get(0).(func(Proto) Entity); ok {
		r0 = rf(src)
	} else {
		r0 = ret.Get(0).(Entity)
	}

	return r0
}

// MockProtoConverter_FromProto_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromProto'
type MockProtoConverter_FromProto_Call[Proto comparable, Entity comparable] struct {
	*mock.Call
}

// FromProto is a helper method to define mock.On call
//   - src Proto
func (_e *MockProtoConverter_Expecter[Proto, Entity]) FromProto(src interface{}) *MockProtoConverter_FromProto_Call[Proto, Entity] {
	return &MockProtoConverter_FromProto_Call[Proto, Entity]{Call: _e.mock.On("FromProto", src)}
}

func (_c *MockProtoConverter_FromProto_Call[Proto, Entity]) Run(run func(src Proto)) *MockProtoConverter_FromProto_Call[Proto, Entity] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Proto))
	})
	return _c
}

func (_c *MockProtoConverter_FromProto_Call[Proto, Entity]) Return(_a0 Entity) *MockProtoConverter_FromProto_Call[Proto, Entity] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProtoConverter_FromProto_Call[Proto, Entity]) RunAndReturn(run func(Proto) Entity) *MockProtoConverter_FromProto_Call[Proto, Entity] {
	_c.Call.Return(run)
	return _c
}

// ToProto provides a mock function with given fields: src
func (_m *MockProtoConverter[Proto, Entity]) ToProto(src Entity) Proto {
	ret := _m.Called(src)

	if len(ret) == 0 {
		panic("no return value specified for ToProto")
	}

	var r0 Proto
	if rf, ok := ret.Get(0).(func(Entity) Proto); ok {
		r0 = rf(src)
	} else {
		r0 = ret.Get(0).(Proto)
	}

	return r0
}

// MockProtoConverter_ToProto_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToProto'
type MockProtoConverter_ToProto_Call[Proto comparable, Entity comparable] struct {
	*mock.Call
}

// ToProto is a helper method to define mock.On call
//   - src Entity
func (_e *MockProtoConverter_Expecter[Proto, Entity]) ToProto(src interface{}) *MockProtoConverter_ToProto_Call[Proto, Entity] {
	return &MockProtoConverter_ToProto_Call[Proto, Entity]{Call: _e.mock.On("ToProto", src)}
}

func (_c *MockProtoConverter_ToProto_Call[Proto, Entity]) Run(run func(src Entity)) *MockProtoConverter_ToProto_Call[Proto, Entity] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Entity))
	})
	return _c
}

func (_c *MockProtoConverter_ToProto_Call[Proto, Entity]) Return(_a0 Proto) *MockProtoConverter_ToProto_Call[Proto, Entity] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProtoConverter_ToProto_Call[Proto, Entity]) RunAndReturn(run func(Entity) Proto) *MockProtoConverter_ToProto_Call[Proto, Entity] {
	_c.Call.Return(run)
	return _c
}

// NewMockProtoConverter creates a new instance of MockProtoConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProtoConverter[Proto comparable, Entity comparable](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProtoConverter[Proto, Entity] {
	mock := &MockProtoConverter[Proto, Entity]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
