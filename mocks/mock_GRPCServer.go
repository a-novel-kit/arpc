// Code generated by mockery v2.46.0. DO NOT EDIT.

package arpcmocks

import (
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"

	net "net"
)

// MockGRPCServer is an autogenerated mock type for the GRPCServer type
type MockGRPCServer struct {
	mock.Mock
}

type MockGRPCServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGRPCServer) EXPECT() *MockGRPCServer_Expecter {
	return &MockGRPCServer_Expecter{mock: &_m.Mock}
}

// GracefulStop provides a mock function with given fields:
func (_m *MockGRPCServer) GracefulStop() {
	_m.Called()
}

// MockGRPCServer_GracefulStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GracefulStop'
type MockGRPCServer_GracefulStop_Call struct {
	*mock.Call
}

// GracefulStop is a helper method to define mock.On call
func (_e *MockGRPCServer_Expecter) GracefulStop() *MockGRPCServer_GracefulStop_Call {
	return &MockGRPCServer_GracefulStop_Call{Call: _e.mock.On("GracefulStop")}
}

func (_c *MockGRPCServer_GracefulStop_Call) Run(run func()) *MockGRPCServer_GracefulStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGRPCServer_GracefulStop_Call) Return() *MockGRPCServer_GracefulStop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGRPCServer_GracefulStop_Call) RunAndReturn(run func()) *MockGRPCServer_GracefulStop_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterService provides a mock function with given fields: desc, impl
func (_m *MockGRPCServer) RegisterService(desc *grpc.ServiceDesc, impl interface{}) {
	_m.Called(desc, impl)
}

// MockGRPCServer_RegisterService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterService'
type MockGRPCServer_RegisterService_Call struct {
	*mock.Call
}

// RegisterService is a helper method to define mock.On call
//   - desc *grpc.ServiceDesc
//   - impl interface{}
func (_e *MockGRPCServer_Expecter) RegisterService(desc interface{}, impl interface{}) *MockGRPCServer_RegisterService_Call {
	return &MockGRPCServer_RegisterService_Call{Call: _e.mock.On("RegisterService", desc, impl)}
}

func (_c *MockGRPCServer_RegisterService_Call) Run(run func(desc *grpc.ServiceDesc, impl interface{})) *MockGRPCServer_RegisterService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*grpc.ServiceDesc), args[1].(interface{}))
	})
	return _c
}

func (_c *MockGRPCServer_RegisterService_Call) Return() *MockGRPCServer_RegisterService_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGRPCServer_RegisterService_Call) RunAndReturn(run func(*grpc.ServiceDesc, interface{})) *MockGRPCServer_RegisterService_Call {
	_c.Call.Return(run)
	return _c
}

// Serve provides a mock function with given fields: _a0
func (_m *MockGRPCServer) Serve(_a0 net.Listener) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Serve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(net.Listener) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGRPCServer_Serve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serve'
type MockGRPCServer_Serve_Call struct {
	*mock.Call
}

// Serve is a helper method to define mock.On call
//   - _a0 net.Listener
func (_e *MockGRPCServer_Expecter) Serve(_a0 interface{}) *MockGRPCServer_Serve_Call {
	return &MockGRPCServer_Serve_Call{Call: _e.mock.On("Serve", _a0)}
}

func (_c *MockGRPCServer_Serve_Call) Run(run func(_a0 net.Listener)) *MockGRPCServer_Serve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(net.Listener))
	})
	return _c
}

func (_c *MockGRPCServer_Serve_Call) Return(_a0 error) *MockGRPCServer_Serve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGRPCServer_Serve_Call) RunAndReturn(run func(net.Listener) error) *MockGRPCServer_Serve_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *MockGRPCServer) Stop() {
	_m.Called()
}

// MockGRPCServer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockGRPCServer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockGRPCServer_Expecter) Stop() *MockGRPCServer_Stop_Call {
	return &MockGRPCServer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockGRPCServer_Stop_Call) Run(run func()) *MockGRPCServer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGRPCServer_Stop_Call) Return() *MockGRPCServer_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGRPCServer_Stop_Call) RunAndReturn(run func()) *MockGRPCServer_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGRPCServer creates a new instance of MockGRPCServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGRPCServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGRPCServer {
	mock := &MockGRPCServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
